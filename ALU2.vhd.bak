library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity ALU2 is
	port	(Clock	:in std_logic;
	A, B	: in unsigned(7 downto 0);
	student_id	:in unsigned(3 downto 0);
	OP: in unsigned (15 downto 0);
	Neg	: out std_logic;
	R1	: out unsigned(3 downto 0);
	R2	: out unsigned(3 downto 0));
end ALU2;

Architecture calculation of ALU2 is 
		Signal Reg1, Reg2, Result	: unsigned(7 downto 0):=(Others=>'0');
		Signal Reg4	: unsigned(0 to 7);
		
Begin
Reg1 <= A;
Reg2 <= B;
Process (Clock, OP)
Begin	
	if(rising_edge(Clock))then 
		case op is
				when "0000000000000001" => --1
				Result<= (Reg1 + "00000010");
				
				when "0000000000000010" => --2
				Result(0) <= Reg2(7);
				Result(1) <= Reg2(6);
				Result(2) <= Reg2(0);
				Result(3) <= Reg2(1);
				Result(4) <= Reg2(2);
				Result(5) <= Reg2(3);
				Result(6) <= Reg2(4);
				Result(7) <= Reg2(5);
				
				when "0000000000000100" => --3
				Result(0) <= Reg1(4);
				Result(1) <= Reg1(5);
				Result(2) <= Reg1(6);
				Result(3) <= Reg1(7);
				Result(4) <= Reg1(0);
				Result(5) <= Reg1(1);
				Result(6) <= Reg1(2);
				Result(7) <= Reg1(3);
				
				when "0000000000001000" => --4
				if (Reg1>Reg2) then
				Result <= Reg2;
				else
				Result <= Reg1;
				end if;
				  
				when "0000000000010000" => --5
				Result <= rotate_right(A,2);
				  
				when "0000000000100000" => --6
				temp(0)<=Reg2(7);
				temp(1)<=Reg2(6);
				temp(2)<=Reg2(5);
				temp(3)<=Reg2(4);
				temp(4)<=Reg2(3);
				temp(5)<=Reg2(2);
				temp(6)<=Reg2(1);
				temp(7)<=Reg2(0);
				Result <= temp;
				neg <= '0';
	
				  
				when "0000000001000000" => --7
				Result <= (Reg1 XOR Reg2);
				Neg <= '0';
				  
				when "0000000010000000" => --8
				Result <= (Reg1 + Reg2) - "00000100"
				
				when "0000000100000000" => --9
				  Result <= "11111111";
				  
				when others =>
				-- Don't care, do nothing
				
			end case;
		end if;
	end process;
	R1 <= Result(3 downto 0);
	R2 <= Result(7 downto 4);
	end calculation;